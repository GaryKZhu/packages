package output
import (
	"os"
)
func WriteHTMLHead(file *os.File){
	file.WriteString("<html>"+"\n")
	file.WriteString("<head>"+"\n")
	file.WriteString("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"+"\n")
	file.WriteString("<style>"+"\n")
	file.WriteString("table {"+"\n")
	file.WriteString("font-family: arial, sans-serif;"+"\n")
	file.WriteString("border-collapse: collapse;"+"\n")
	file.WriteString("width: 100%;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("td, th {"+"\n")
	file.WriteString("border: 1px solid #dddddd;"+"\n")
	file.WriteString("text-align: left;"+"\n")
	file.WriteString("padding: 8px;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("tr:nth-child(even) {"+"\n")
	file.WriteString("background-color: #dddddd;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("body {font-family: Arial;}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("/* Style the tab */"+"\n")
	file.WriteString(".tab {"+"\n")
	file.WriteString("overflow: hidden;"+"\n")
	file.WriteString("border: 1px solid #ccc;"+"\n")
	file.WriteString("background-color: #f1f1f1;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("/* Style the buttons inside the tab */"+"\n")
	file.WriteString(".tab button {"+"\n")
	file.WriteString("background-color: inherit;"+"\n")
	file.WriteString("float: left;"+"\n")
	file.WriteString("border: none;"+"\n")
	file.WriteString("outline: none;"+"\n")
	file.WriteString("cursor: pointer;"+"\n")
	file.WriteString("padding: 14px 16px;"+"\n")
	file.WriteString("transition: 0.3s;"+"\n")
	file.WriteString("font-size: 17px;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("/* Change background color of buttons on hover */"+"\n")
	file.WriteString(".tab button:hover {"+"\n")
	file.WriteString("background-color: #ddd;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("/* Create an active/current tablink class */"+"\n")
	file.WriteString(".tab button.active {"+"\n")
	file.WriteString("background-color: #ccc;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("/* Style the tab content */"+"\n")
	file.WriteString(".tabcontent {"+"\n")
	file.WriteString("display: none;"+"\n")
	file.WriteString("padding: 6px 12px;"+"\n")
	file.WriteString("border: 1px solid #ccc;"+"\n")
	file.WriteString("border-top: none;"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString("</style>"+"\n")
	file.WriteString("<h2 style=\" text-align: center\">SQL Log Parser</h2>"+"\n")
	file.WriteString("</head>"+"\n")
	file.WriteString("<body>"+"\n")
	file.WriteString("<h3>SQL Log Table</h3>"+"\n")
	file.WriteString("<!-- Two clickable tabs-->"+"\n")
	file.WriteString("<div class=\"tab\">"+"\n")
	file.WriteString("<button class=\"tablinks\" onclick=\"openTab(event, 'drawTable')\">Details</button>"+"\n")
	file.WriteString("</div>"+"\n")
	file.WriteString("<div id=\"table_div\"></div>"+"\n")
	file.WriteString("<footer>"+"\n")
	file.WriteString("<br/>"+"\n")
	file.WriteString("<p style=\"background: #ffae00; text-align: center;\"><b>Contributed by Gary Zhu</b></p>"+"\n")
	file.WriteString("</footer>"+"\n")
	file.WriteString("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>"+"\n")
	file.WriteString("<script type=\"text/javascript\">"+"\n")
	file.WriteString("google.charts.load('current', {'packages':['table']});"+"\n")
	file.WriteString("google.charts.setOnLoadCallback(drawTable);"+"\n")
	file.WriteString(""+"\n")
	file.WriteString("function drawTable() {"+"\n")
	file.WriteString("var data = new google.visualization.DataTable();"+"\n")
	// file.WriteString("data.addColumn('string', 'Starting Time');"+"\n")
	// file.WriteString("data.addColumn('string', 'JVMName');"+"\n")
	// file.WriteString("data.addColumn('string', 'CIDNUM');"+"\n")
	// file.WriteString("data.addColumn('string', 'UserName');"+"\n")
	// file.WriteString("data.addColumn('string', 'SPID');"+"\n")
	// file.WriteString("data.addColumn('string', 'AppName');"+"\n")
	// file.WriteString("data.addColumn('string', 'ObjectName');"+"\n")
	// file.WriteString("data.addColumn('number', 'ElaspedTime(ms)');"+"\n")
	// file.WriteString("data.addColumn('string', 'STMT');"+"\n")
	// file.WriteString("data.addRows(["+"\n")
}
func WriteHTMLTail(file *os.File){
	file.WriteString("]);"+"\n")
	file.WriteString("var table = new google.visualization.Table(document.getElementById('table_div'));"+"\n")
	file.WriteString("table.draw(data, {allowHtml:true,showRowNumber: false});"+"\n")
	file.WriteString("}"+"\n")
	file.WriteString("</script>"+"\n")
	file.WriteString("</body>"+"\n")
	file.WriteString("</html>"+"\n")
}